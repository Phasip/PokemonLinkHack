import sys,binascii
from modules import pkmn_pokedata,pkmn_chars,gblink
from modules.gblink import sendGb,sendUntil,wait_60,sync
#As described in http://vaguilar.js.org/posts/1/

def exploit(code):
    if b'\xFE' in code:
        print("Cannot have code with 0xFE byte. (You cannot use the cp operation, or -2 constant)")
        return
    if len(code) > (0xc8-2):
        print("Code to execute to big! Can max run %i bytes (current input is %i bytes)"%(0xc8-2,len(code)))
        return
    
    sendGb(b'\x00'*30) #Just send some additional 00 to make sure, gameboy is waiting for next FD anyway
    sendGb(b"\xFD\xFD\xFD" + b"\xAA"*11) #0xAA is our random numbers
    sendGb(b'\x00'*30) #Just send some additional 00 to make sure, gameboy is waiting for next FD anyway
    sendGb(b'\xFD\xFD\xFD\xFD\xFD\xFD\xFD')
    sendGb(binascii.unhexlify(b'f80036fd013e58c5c3d6c5'))  #Code to fix stack and jump a few bytes into patch list
    sendGb(b"\x06")
    sendGb(b'\x15'*6)  #Code to fix stack and jump a few bytes into patch list
    sendGb(b'\xe3'*346)
    sendGb(b'\xce\xe3\xe3\xff')
    sendGb(b'\x00'*(0x3a+30)) #Just send some additional 00 to make sure, gameboy is waiting for next FD anyway
    sendGb(b"\xFD\xFD\xFD\xFD\xFD\xFF\xFF") # End patch list
    sendGb(code) 
    sendGb(b"\x00"*(0xc8-len(code)-2)) #End code with nops
    
def init(arg):
    gblink.init(arg)
    # Initialize Link by repeatedly sending 0x01 until other reples with 0x02
    sendUntil(b'\x01',b'\x02')
    # Indicate that we consider the link to be up by sending 0x00
    sendGb(b"\x00\x00\x00")
    input("Press enter when waiting")
    # Unclear why this is here...
    sync()
    # 0xD0 = 'Trade center' is highlighted. Don't think the 0x00 is needed...
    sendGb(b"\xD0"*2+b'\x00')
    # 0xD4 indicates that the COLOSSEUM option was selected. I think it only requires 1 copy but who cares
    sendGb(b"\xD4"*4)
    # Start with colosseum stuff....
    sendGb(b"\x00\xFE",0.05,False)
    wait_60()
    sync()
