import buspirate,time,binascii,pkmn_chars,bgb_master,sys,pkmn_pokedata

#Pre-req Old rod or good rod, one worthless pokemon
#Result: Old rod transformed to F8 item, maybe new pokedex entries.

# Place old rod/Good rod at fourth item slot.
# Have a single worthless pokemon in your party.
# Start trading.
# Trade pokemon for missingno (converts old rod to item 7F)
# Trade missingno for missingno (converts 7F to 8F)
# Trade missingno for voltrom (is poisoned)
# Cancel trade and walk around until faint (to escape cable club)
# Go to computer, change box (which saves the game!)
# (Saves from cable club don't work as they don't save your items)

#Now you have a 8F item!










#Pokemon dec, Dex nr
#(242)          D1 - Item4  #Modify bit 1 (01)
#(236)          D3 - Item4  #Modify bit 3 (04)
#(249)          D5 - Item4  #Modify bit 5 (10)

bp = False
def sendDataByte(byte):
    global bp
    if bp == True:
        return buspirate.sendDataByte(byte)
        
    return bgb_master.sendDataByte(byte)

def sendGb(data,wait = 0.005,resend = True):
    ret = b''
    for i in data:
        val = sendDataByte(i)
        time.sleep(wait)
        while val == 0xFE and resend == True:
            val = sendDataByte(i)
            time.sleep(wait)
        ret = ret + bytes((val,))
        
    print("Sent: " + str(binascii.hexlify(data)))
    print("Recv: " + str(binascii.hexlify(ret)))
    return ret
def sendUntil(data,waitfor,wait = 0.02):
    retval = None
    while retval != waitfor:
        retval = sendGb(data,wait)
    return retval

def sync(byte = b"\x60"):
    sendGb(b"\x60"*13)
    sendGb(b"\x00"*10)

def wait_60(byte=b"\x60"):
    retval = 0x70
    while (retval >> 4) != 6:
        retval = sendGb(byte,0.2)[0]
        
    return bytes((retval,))
    
    sendUntil(b"\x60",b"\x60")

def getString(text,length):
    ret = b""
    if len(text) >= length:
        print("Text too long!")
        sys.exit(1)
    ret = pkmn_chars.string_to_gb(text)
    ret = ret + b"\x50"*(length-len(ret)) #String end and fill
    return ret


def send_pokemon_data(trainer_name,pokemon_trainer_name,pokemon_name,pokemon):
    sendGb(b"\xFD"*8 + b"\xAA"*9) #0xAA is our random numbers... I think
    sendGb(b"\xB2\xFD\xFD\xFD\xFD\xFD\xFD\xFD\xFD\xFD\xFD")
    sendGb(getString(trainer_name,11))  #Actual displayed name
    sendGb(b"\x01") #Number of pokemon
    sendGb(bytes((pokemon.Pokemon,))) 
    sendGb(b"\xFF\x00\x00\x00\x00\x00")
    sendGb(pkmn_pokedata.get_pkmn_bytes(outPokemon))
    #sendGb(b"\xB0\x00\x15\x00\x00\x14\x14\x2D\x0A\x2D\x00\x00\x46\xFA\x00\x00\xDD\x00\x4A\x00\x68\x00\x64\x00\x73\x00\x4B\x5A\xF2\x23\x28\x00\x00\x06\x00\x15\x03\x0B\x00\x0B\x00\x0E\x00")
    sendGb(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    sendGb(getString(pokemon_trainer_name,11)) # Pokemon trainer name
    sendGb(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    sendGb(getString(pokemon_name,11)) # Pokemon name
    sendGb(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00")
    sendGb(b"\x00\xFD\xFD\xFD\xFD\x00\x00\x00\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    
    
if sys.argv[1] == "bp":
    bp = True
    print("Initializing real deal!")
    buspirate.bus_init()
else:
    bp = False
    print("Initializing emulator stuff...")
    bgb_master.init()
    time.sleep(1)





name = "Hack" # Name of player
sendUntil(b'\x01',b'\x02')
sendGb(b"\x00\x00\x00")
input("Press enter when waiting")
sync()
sendGb(b"\xD0"*2+b'\x00')
sendGb(b"\xD4"*4)
sendGb(b"\x00\xFE",0.05,False)
wait_60()
sync()


pokemon_name = "First MN"
outPokemon = pkmn_pokedata.hmslave #Seems like some data is ignored, such as pokemon type
outPokemon = outPokemon._replace(Pokemon=0xf9)

send_pokemon_data(name,name,pokemon_name,outPokemon)
wait_60() #Trade first pokemon (??)
sync()
wait_60(b"\x62") #Accept trade
sync()

pokemon_name = "Second MN"
outPokemon = pkmn_pokedata.hmslave #Seems like some data is ignored, such as pokemon type
outPokemon = outPokemon._replace(Pokemon=0xf2)
send_pokemon_data(name,name,pokemon_name,outPokemon)
wait_60() #Trade first pokemon (??)
sync()
wait_60(b"\x62") #Accept trade
sync()

#pokemon_name = "SerialRecv"
#outPokemon = pkmn_pokedata.hmslave #Seems like some data is ignored, such as pokemon type
#outPokemon = outPokemon._replace(Pokemon=0x18) #Tentacool
#outPokemon = pkmn_pokedata.modify_pkmn_bytes(outPokemon,1,b"\x21\x93\xD8\x11\x93\xD8\xE5\xCD\x6F\x21\xE1\xE9")
#send_pokemon_data(name,name,pokemon_name,outPokemon)
#wait_60() #Trade first pokemon (??)
#sync()
#wait_60(b"\x62") #Accept trade
#sync()

pokemon_name = "Voltrob"
outPokemon = pkmn_pokedata.hmslave #Seems like some data is ignored, such as pokemon type
outPokemon = outPokemon._replace(Pokemon=0x06,Current_HP=1,Status=0x08) #Voltrob, hp = 1, poisoned
send_pokemon_data(name,name,pokemon_name,outPokemon)
wait_60() #Trade first pokemon (??)
sync()
wait_60(b"\x62") #Accept trade
sync()

send_pokemon_data(name,name,pokemon_name,outPokemon)
wait_60(b"\x6f") #Abort trade?

while True:
    time.sleep(0.01)
    ret = sendDataByte(0xFE)
    if ret == b'\xfe':
        continue
    sendDataByte(ret)
