import buspirate,time,binascii,pkmn_chars,bgb_master,sys,pkmn_pokedata
#Pre-req: Voltrob & SerialRecv tentacool, f8
#Result: Run code - fill pokedex up to 152 pokemons.



b  = '0e26'       #ld c,26
b = b+'21F7D2'      #ld hl,d2f7
b = b+'3eff'        #ld a,ff
                    #.loop
b = b + "22"        #ldi (hl),a
b = b+'0d'          #dec c
b = b + "20FC"      #jr nz,.loop
b = b+"C9"          #ret


bytecode =  binascii.unhexlify(b)
bp = False
def sendDataByte(byte):
    global bp
    if bp == True:
        return buspirate.sendDataByte(byte)
        
    return bgb_master.sendDataByte(byte)

def sendGb(data,wait = 0.005,resend = True):
    ret = b''
    for i in data:
        val = sendDataByte(i)
        time.sleep(wait)
        while val == 0xFE and resend == True:
            val = sendDataByte(i)
            time.sleep(wait)
        ret = ret + bytes((val,))
        
    print("Sent: " + str(binascii.hexlify(data)))
    print("Recv: " + str(binascii.hexlify(ret)))
    return ret

def sendUntil(data,waitfor,wait = 0.02):
    retval = None
    while retval != waitfor:
        retval = sendGb(data,wait)
    return retval
    
if sys.argv[1] == "bp":
    bp = True
    print("Initializing real deal!")
    buspirate.bus_init()
else:
    bp = False
    print("Initializing emulator stuff...")
    bgb_master.init()
    time.sleep(1)





name = "Hack" # Name of player
sendUntil(b'\x01',b'\x02')
sendGb(b"\x00\x00\x00")
input("Press enter after using F8")

#06 1C # ld b,1c - Bank we want to use (1C)
#21 A0 41 # Place we want to call (41A0)
#CD D6 35 # Bank switch call
#C9 #Return

sendGb(b"\xFD"*20) # Sync function syncing
sendGb(b"\x00"*20) # Nop sled so I dont have to worry
sendGb(bytecode)
sendGb(b"\x00"*0x1A8)
